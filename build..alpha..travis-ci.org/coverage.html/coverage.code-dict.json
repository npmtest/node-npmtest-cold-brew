{"/home/travis/build/npmtest/node-npmtest-cold-brew/test.js":"/* istanbul instrument in package npmtest_cold_brew */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cold-brew/lib.npmtest_cold_brew.js":"/* istanbul instrument in package npmtest_cold_brew */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cold_brew = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cold_brew = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cold-brew/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cold-brew && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cold_brew */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cold_brew\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cold_brew.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cold_brew.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cold_brew.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cold_brew.__dirname + '/lib.npmtest_cold_brew.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cold-brew/node_modules/cold-brew/src/cold-brew-test.js":"/* eslint no-use-before-define: 0 */\n/* eslint no-param-reassign: 0 */\n/* eslint no-undef: 0 */\n/* eslint no-unused-vars: 0 */\n/* eslint prefer-arrow-callback: 0 */\n/* eslint func-names: 0 */\n/* eslint no-shadow: 0 */\n'use strict';\nconst selenium = require('selenium-webdriver');\n\nconst { By } = selenium;\n\n/**\n * createClient - Creates and returns a webdriver object with the coldBrew\n * methods attached, allowing it to listen for RTCPeerConnection events\n * that occur in the browser.\n *\n * @return webdriver  A selenium webdriver object with the coldBrew\n * methods attached\n */\nfunction createClient() {\n  let client;\n  // const client = new selenium.Builder()\n  //   .usingServer()\n  //   .withCapabilities({\n  //     browserName: 'chrome',\n  //     chromeOptions: {\n  //       args: [\n  //         '--use-fake-ui-for-media-stream',\n  //       ],\n  //     },\n  //   })\n  //   .build();\n\n  if (process.env.SAUCE_USERNAME !== undefined) {\n    client = new selenium.Builder()\n      .usingServer('http://' + process.env.SAUCE_USERNAME + ':' + process.env.SAUCE_ACCESS_KEY + '@ondemand.saucelabs.com:80/wd/hub')\n      .withCapabilities({\n        'tunnel-identifier': process.env.TRAVIS_JOB_NUMBER,\n        build: process.env.TRAVIS_BUILD_NUMBER,\n        username: process.env.SAUCE_USERNAME,\n        accessKey: process.env.SAUCE_ACCESS_KEY,\n        browserName: 'chrome',\n        chromeOptions: {\n          args: [\n            '--use-fake-ui-for-media-stream',\n          ],\n        },\n      }).build();\n  } else {\n    client = new selenium.Builder()\n    .usingServer()\n    .withCapabilities({\n      browserName: 'chrome',\n      chromeOptions: {\n        args: [\n          '--use-fake-ui-for-media-stream',\n        ],\n      },\n    })\n    .build();\n  }\n\n  return addColdBrewMethods(client);\n}\n\n\n/**\n * addColdBrewMethods - Attaches the coldBrew methods to a webdriver instance,\n * which will allow it to listen for RTCPeerCOnnection events to occur in the\n * browser.\n *\n * @param  {type} client description\n * @return {type}        description\n */\nfunction addColdBrewMethods(client) {\n  /**\n   * untilRTCEvents - allows the webdriver to wait until certain\n   * RTCPeerCOnnection events to occur before proceeding\n   *\n   * @param  ...Strings events A list of the names of the events that\n   * the client should wait for before proceeding\n   *\n   * @return function        A function that returns a promise to execute a\n   * script in the browser that checks whether or not the provided RTC events\n   * exist in the window.RTCEvents object. This function will be executed\n   * repeatedly if it is used within a webdriver.wait() call,\n   * e.g. client.wait(client.untilRTCEvents('signalingstatechange', 'iceconnectionstatechange'))\n   */\n  client.untilRTCEvents = function (events, options = {}) {\n    const { inOrder, label } = options;\n    if (inOrder && typeof inOrder !== 'boolean') {\n      throw new TypeError(\n        `Invalid option passed into untilRTCEvents: inOrder: ${inOrder}`\n      );\n    }\n\n    if (label && typeof label !== 'string') {\n      throw new TypeError(\n        `Invalid option passed into untilRTCEvents: label: ${label}`\n      );\n    }\n\n    // Needs to return a plain function instead of a promise so that\n    // it will be executed repeatedly within the client.wait() function\n    //\n    // The plain function should return true if the events we are waiting\n    // for exist on the window object, false otherwise.\n    return function () {\n      return client.executeScript(function (events, options) {\n        const { inOrder, label } = options;\n        // Check to make sure coldBrewData has been initialized\n        if (!(window.coldBrewData && window.coldBrewData.RTCEvents)) {\n          return false;\n        }\n\n        const loggedEvents = label ?\n          window.coldBrewData.peerConnections[label] :\n          window.coldBrewData.RTCEvents;\n\n        loggedEventNames = loggedEvents.map(event => event.type);\n        // Handle the case where the user doesn't care if the events\n        // happened in a certain order\n\n\n        if (!inOrder) {\n          return events.every(eventName => loggedEventNames.includes(eventName));\n        } else {\n          return sameElementsInSameOrder(events, loggedEventNames);\n        }\n\n        function sameElementsInSameOrder(arr1, arr2) {\n          let remainingArr2 = arr2;\n          return arr1.reduce((truth, element) => {\n            if (!truth) return false;\n\n            const index = remainingArr2.indexOf(element);\n            if (index === -1) {\n              return false;\n            }\n\n            remainingArr2 = remainingArr2.slice(index);\n            return true;\n          }, true);\n        }\n      }, events, options);\n    };\n  };\n\n\n  /**\n   * waitUntilRTCEvents - convenience function to simplify the usage\n   * of client.untilRTCEvents\n   *\n   * @param   events description\n   * @return {type}           description\n   */\n  client.waitUntilRTCEvents = function (events, options, timeout) {\n    return client.wait(client.untilRTCEvents(events, options), timeout);\n  };\n\n\n  client.untilSendSignaling = function (events, options = {}) {\n    // Needs to return a plain function instead of a promise so that\n    // it will be executed repeatedly within the client.wait() function\n    //\n    // The plain function should return true if the events we are waiting\n    // for exist on the window object, false otherwise.\n\n    const { inOrder } = options;\n    if (inOrder && typeof inOrder !== 'boolean') {\n      throw new TypeError(\n        `Invalid option passed into untilSendSignaling: inOrder: ${inOrder}`\n      );\n    }\n\n    return function () {\n      return client.executeScript(function (events, inOrder) {\n        // Check to make sure coldBrewData has been initialized\n        if (!(window.coldBrewData && window.coldBrewData.socketEvents)) {\n          return false;\n        }\n\n        if (!inOrder) {\n          const outgoingSocketEvents = window.coldBrewData.socketEvents.outgoing\n            .map(event => event.type);\n          return events.every(eventName => outgoingSocketEvents.includes(eventName));\n        }\n\n        const socketEvents = window.coldBrewData.socketEvents.outgoing\n          .map(event => event.type);\n\n        return sameElementsInSameOrder(events, socketEvents);\n\n        function sameElementsInSameOrder(arr1, arr2) {\n          let remainingArr2 = arr2;\n          return arr1.reduce((truth, element) => {\n            if (!truth) return false;\n\n            const index = remainingArr2.indexOf(element);\n            if (index === -1) {\n              return false;\n            }\n            remainingArr2 = remainingArr2.slice(index);\n            return true;\n          }, true);\n        }\n      }, events, inOrder);\n    };\n  };\n\n\n  client.waitUntilSendSignaling = function (events, options, timeout) {\n    return client.wait(client.untilSendSignaling(events, options), timeout);\n  };\n\n\n  client.untilRecieveSignaling = function (events, options = {}) {\n    const { inOrder } = options;\n    if (inOrder && typeof inOrder !== 'boolean') {\n      throw new TypeError(\n        `Invalid option passed into untilRecieveSignaling: inOrder: ${inOrder}`\n      );\n    }\n    return function () {\n      return client.executeScript(function (events, inOrder) {\n        if (!(window.coldBrewData && window.coldBrewData.socketEvents)) {\n          return false;\n        }\n        if (!inOrder) {\n          const incomingSocketEvents = window.coldBrewData.socketEvents.incoming\n            .map(event => event.type);\n          return events.every(eventName => incomingSocketEvents.includes(eventName));\n        }\n        const socketEvents = window.coldBrewData.socketEvents.incoming\n          .map(event => event.type);\n\n        return sameElementsInSameOrder(events, socketEvents);\n\n        function sameElementsInSameOrder(arr1, arr2) {\n          let remainingArr2 = arr2;\n          return arr1.reduce((truth, element) => {\n            if (!truth) return false;\n\n            const index = remainingArr2.indexOf(element);\n            if (index === -1) {\n              return false;\n            }\n            remainingArr2 = remainingArr2.slice(index);\n            return true;\n          }, true);\n        }\n      }, events, inOrder);\n    };\n  };\n\n\n  client.waitUntilReceiveSignaling = function (events, options, timeout) {\n    return client.wait(client.untilRecieveSignaling(events, options), timeout);\n  };\n\n  client.untilDataChannelEvents = function (events, options = {}) {\n    const { inOrder } = options;\n    if (inOrder && typeof inOrder !== 'boolean') {\n      throw new TypeError(\n        `Invalid option passed into untilDataChannelEvents: inOrder: ${inOrder}`\n      );\n    }\n    return function () {\n      return client.executeScript(function (events, inOrder) {\n        if (!(window.coldBrewData && window.coldBrewData.RTCDataChannelEvents)) {\n          return false;\n        }\n        if (!inOrder) {\n          const RTCDataChannelEvents = window.coldBrewData.RTCDataChannelEvents.map(event => event.type);\n          return events.every(eventName => RTCDataChannelEvents.includes(eventName));\n        }\n      }, events, inOrder);\n    }\n  }\n\n  client.waitUntilDataChannelEvents = function (events, options, timeout) {\n    return client.wait(client.untilDataChannelEvents(events, options), timeout);\n  };\n\n  /**\n   * findElementByAttributes - allows the webdriver to locate elements\n   * by a css selector and then filter those elements by other attributes\n   * that they possess.\n   *\n   * @param  String selector   A css selector for the element to find\n   *\n   * @param  Object attributes An object whose keys are DOM node attribute\n   * names and values are the corresponding values of the desired element\n   *\n   * @return Promise           A promise that resolves with the first element\n   * that is located by the given css selector AND possesses the given\n   * attributes\n   */\n  client.findElementByAttributes = function (selector, attributes) {\n    return client.findElement(By.js(function (selector, attributes) {\n      let elements = Array.from(document.querySelectorAll(selector));\n\n      Object.keys(attributes).forEach(attribute => {\n        elements = elements.filter(element =>\n          element[attribute] === attributes[attribute]);\n      });\n\n      return elements[0];\n    }, selector, attributes || {}));\n  };\n\n\n  /**\n   * client - Schedules several navigation tasks at once\n   *\n   * Convenience method to allow the webdriver to more easily\n   * navigate throughout the website\n   *\n   * @param  Array navigationEvents An array of subarrays, each subarray\n   * representing one navigation task. The navigation tasks are of the form\n   * [action, selector, atributes], e.g.\n   * ['click', 'button.login', {innerText: 'Login'}]\n   *\n   * The allowable actions are 'click', and 'sendKeys'. If 'sendKeys' is given,\n   * a fourth element should be included in the array indicating the keys to\n   * be sent, e.g.\n   * ['sendKeys', 'input', {placeholder: 'username'}, 'dking']\n   *\n   * @return undefined\n   */\n  client.do = function (navigationEvents) {\n    const validInput = navigationEvents.every(event =>\n      validNavigation(event));\n\n    if (!validInput) throw new TypeError('Navigation events');\n\n    const navigationPromises = navigationEvents.reduce((arr, event) => {\n      const action = event[0];\n      const selector = event[1];\n      const attributes = event[2];\n      const keys = event[3]; // May be undefined if no 3rd item was given\n\n      const navigationPromise = client.findElementByAttributes(selector, attributes)\n        .then((element) => element[action](keys))\n        .catch((err) => {\n          throw new TypeError(\n            `No element found with selector ${selector}\n            and attributes ${JSON.stringify(attributes)}`\n          );\n        });\n\n      arr.push(navigationPromise);\n\n      return arr;\n    }, []);\n\n    return selenium.promise.all(navigationPromises);\n  };\n\n\n  function validNavigation(navigationEvent) {\n    return Array.isArray(navigationEvent) &&\n      ['click', 'sendKeys'].includes(navigationEvent[0]);\n  }\n\n\n  return client;\n}\n\nclass ColdBrewError extends Error { }\n\n\nmodule.exports = { createClient, addColdBrewMethods };\n","/home/travis/build/npmtest/node-npmtest-cold-brew/node_modules/cold-brew/Gulpfile.js":"const gulp = require('gulp');\nconst babel = require('gulp-babel');\nconst uglify = require('gulp-uglify');\nconst watch = require('gulp-watch');\nconst notify = require('gulp-notify');\n\n\nconst paths = {\n  babel: \"src/rtc.js\",\n};\n\nfunction handleErrors() {\n  notify.onError({\n    title : 'Compile Error',\n    message : '<%= error.message %>'\n  }).apply(this, arguments);\n  this.emit('end'); //keeps gulp from hanging on this task\n}\n\ngulp.task('watch', function() {\n  gulp.watch(paths.babel, ['babel']);\n  gulp.watch(paths.cold_brew, ['build']);\n  gulp.watch(paths.cold_brew_bundled, ['uglify'])\n});\n\ngulp.task('babel', function() {\n  gulp.src(paths.babel)\n    .pipe(babel())\n    .pipe(gulp.dest('.'));\n});\n\ngulp.task('default', ['babel', 'watch']);","/home/travis/build/npmtest/node-npmtest-cold-brew/node_modules/cold-brew/rtc.js":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* eslint no-undef: 0 */\n/* eslint no-unused-vars: 0 */\n/* eslint prefer-arrow-callback: 0 */\n/* eslint func-names: 0 */\n/* eslint no-use-before-define: 0 */\n/* eslint no-param-reassign: 0 */\n/* eslint no-shadow: 0 */\n\nif (window.coldBrewData) {\n  throw new ColdBrewError('Cannot capture RTC events, window.coldBrewData property already exists');\n}\n\n// Attach a coldBrewData object to the window object to keep a record of the\n// events that fire on the RTCPeerConnection object\nwindow.coldBrewData = {\n  RTCEvents: [],\n  RTCDataChannelEvents: [],\n  socketEvents: {\n    outgoing: [],\n    incoming: []\n  },\n  peerConnections: {},\n  sockets: {}\n};\n\n// An array of all of the events that fire on the RTCPeerConnection object\nvar RTC_PEER_CONNECTION_EVENTS = ['addstream', 'connectionstatechange', 'datachannel', 'icecandidate', 'iceconnectionstatechange', 'icegatheringstatechange', 'identityresult', 'idpassertionerror', 'idpvalidationerror', 'negotiationneeded', 'peeridentity', 'removestream', 'signalingstatechange', 'track'];\n\nvar RTC_DATA_CHANNEL_EVENTS = ['bufferedamountlow', 'close', 'error', 'message', 'open'];\n\n/**\n * coldBrewRTC - Factory function that creates and returns an RTCPeerCOnnection\n * object. The RTCPeerConnection object's behavior is augmented to\n * enable it to push any events that fire on it into an array attached\n * to the window object.\n *\n * @param  {type} servers        description\n * @param  {type} options        description\n * @param  {type} coldBrewConfig description\n * @return {type}                description\n */\nfunction coldBrewRTC(servers, options, coldBrewConfig, dataChannelConfig) {\n  if (coldBrewConfig && coldBrewConfig.production) {\n    return new RTCPeerConnection(servers, options);\n  }\n\n  // setup config for RTCPeerConnection\n  coldBrewConfig = coldBrewConfig || {};\n\n  var listeners = coldBrewConfig.listeners || RTC_PEER_CONNECTION_EVENTS;\n  var label = coldBrewConfig.label || null;\n  validateListeners(listeners);\n\n  // setup config for dataChannelConfig\n  dataChannelConfig = dataChannelConfig || {};\n\n  var dataListeners = dataChannelConfig.listeners || RTC_DATA_CHANNEL_EVENTS;\n  validateDataListeners(dataListeners);\n\n  // Create peer connection\n  var peerConnection = new RTCPeerConnection(servers, options);\n  addEventLogListeners(peerConnection, listeners, label);\n  addDataListenersOnChannelCreation(peerConnection, dataListeners);\n  addDataListenersOnDataChannelEvent(peerConnection, dataListeners);\n\n  return peerConnection;\n\n  function validateListeners(listeners) {\n    var valid = listeners.every(function (listener) {\n      return RTC_PEER_CONNECTION_EVENTS.includes(listener);\n    });\n\n    if (!valid) {\n      throw new ColdBrewError('Invalid event names passed in to coldBrewRTC');\n    }\n  }\n\n  function validateDataListeners(dataListeners) {\n    var valid = dataListeners.every(function (listener) {\n      return RTC_DATA_CHANNEL_EVENTS.includes(listener);\n    });\n\n    if (!valid) {\n      throw new ColdBrewError('Invalid data channel event names passed in to coldBrewRTC');\n    }\n  }\n\n  function addEventLogListeners(peerConnection, listeners) {\n    var label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (label) {\n      window.coldBrewData.peerConnections[label] = [];\n    }\n\n    listeners.forEach(function (listener) {\n      peerConnection.addEventListener(listener, function (event) {\n        window.coldBrewData.RTCEvents.push(event);\n        if (label) {\n          window.coldBrewData.peerConnections[label].push(event);\n        }\n      });\n    });\n  }\n\n  function addDataListenersOnChannelCreation(peerConnection, dataListeners) {\n    var createDataChannel = peerConnection.createDataChannel.bind(peerConnection);\n\n    peerConnection.createDataChannel = function () {\n      var newDataChannel = createDataChannel.apply(undefined, arguments);\n      dataListeners.forEach(function (listener) {\n        newDataChannel.addEventListener(listener, function (event) {\n          window.coldBrewData.RTCDataChannelEvents.push(event);\n        });\n      });\n\n      return newDataChannel;\n    };\n  }\n\n  function addDataListenersOnDataChannelEvent(peerConnection, dataListeners) {\n    Object.defineProperty(peerConnection, 'ondatachannel', {\n      set: function set(func) {\n        peerConnection.addEventListener('datachannel', function (e) {\n          var datachannel = e.channel;\n          dataListeners.forEach(function (listener) {\n            datachannel.addEventListener(listener, function (event) {\n              window.coldBrewData.RTCDataChannelEvents.push(event);\n            });\n          });\n\n          func(e);\n        });\n      }\n    });\n  }\n}\n\nfunction observeSignaling(socket) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (options.production === true) return socket;\n\n  return new Proxy(socket, {\n    get: function get(target, key, receiver) {\n      switch (key) {\n        case 'emit':\n          return emitAndLog(target);\n\n        case 'on':\n          return logOnReceipt(target);\n\n        default:\n          return target[key];\n      }\n    }\n  });\n\n  function emitAndLog(target) {\n    return function () {\n      // emit can be called with 1 to 3 arguments:\n      // type\n      // type, data\n      // type, callback\n      // type, data, callback\n      // Therefore, we need to parse the arguments\n      var type = arguments.length <= 0 ? undefined : arguments[0];\n\n      var data = void 0;\n      var callback = void 0;\n\n      if (arguments.length <= 1 ? undefined : arguments[1]) {\n        if (typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'function') callback = arguments.length <= 1 ? undefined : arguments[1];else data = arguments.length <= 1 ? undefined : arguments[1];\n      }\n\n      if (arguments.length <= 2 ? undefined : arguments[2]) {\n        if (typeof (arguments.length <= 2 ? undefined : arguments[2]) === 'function') callback = arguments.length <= 2 ? undefined : arguments[2];\n      }\n\n      window.coldBrewData.socketEvents.outgoing.push({\n        type: type,\n        data: data,\n        callback: callback\n      });\n\n      return target.emit.apply(target, arguments);\n    };\n  }\n\n  function logOnReceipt(target) {\n    return function (type, callback) {\n      target.on(type, function () {\n        for (var _len = arguments.length, data = Array(_len), _key = 0; _key < _len; _key++) {\n          data[_key] = arguments[_key];\n        }\n\n        window.coldBrewData.socketEvents.incoming.push({\n          type: type,\n          data: data,\n          callback: callback\n        });\n\n        callback.apply(undefined, data);\n      });\n    };\n  }\n}\n\nvar ColdBrewError = function (_Error) {\n  _inherits(ColdBrewError, _Error);\n\n  function ColdBrewError() {\n    _classCallCheck(this, ColdBrewError);\n\n    return _possibleConstructorReturn(this, (ColdBrewError.__proto__ || Object.getPrototypeOf(ColdBrewError)).apply(this, arguments));\n  }\n\n  return ColdBrewError;\n}(Error);\n\nif (typeof module !== 'undefined') {\n  module.exports = {\n    coldBrewRTC: coldBrewRTC,\n    observeSignaling: observeSignaling,\n    RTC_PEER_CONNECTION_EVENTS: RTC_PEER_CONNECTION_EVENTS,\n    RTC_DATA_CHANNEL_EVENTS: RTC_DATA_CHANNEL_EVENTS\n  };\n}","/home/travis/build/npmtest/node-npmtest-cold-brew/node_modules/cold-brew/src/rtc.js":"/* eslint no-undef: 0 */\n/* eslint no-unused-vars: 0 */\n/* eslint prefer-arrow-callback: 0 */\n/* eslint func-names: 0 */\n/* eslint no-use-before-define: 0 */\n/* eslint no-param-reassign: 0 */\n/* eslint no-shadow: 0 */\n\nif (window.coldBrewData) {\n  throw new ColdBrewError(\n    'Cannot capture RTC events, window.coldBrewData property already exists');\n}\n\n// Attach a coldBrewData object to the window object to keep a record of the\n// events that fire on the RTCPeerConnection object\nwindow.coldBrewData = {\n  RTCEvents: [],\n  RTCDataChannelEvents: [],\n  socketEvents: {\n    outgoing: [],\n    incoming: [],\n  },\n  peerConnections: {},\n  sockets: {},\n};\n\n// An array of all of the events that fire on the RTCPeerConnection object\nconst RTC_PEER_CONNECTION_EVENTS = [\n  'addstream',\n  'connectionstatechange',\n  'datachannel',\n  'icecandidate',\n  'iceconnectionstatechange',\n  'icegatheringstatechange',\n  'identityresult',\n  'idpassertionerror',\n  'idpvalidationerror',\n  'negotiationneeded',\n  'peeridentity',\n  'removestream',\n  'signalingstatechange',\n  'track',\n];\n\nconst RTC_DATA_CHANNEL_EVENTS = [\n  'bufferedamountlow',\n  'close',\n  'error',\n  'message',\n  'open',\n];\n\n/**\n * coldBrewRTC - Factory function that creates and returns an RTCPeerCOnnection\n * object. The RTCPeerConnection object's behavior is augmented to\n * enable it to push any events that fire on it into an array attached\n * to the window object.\n *\n * @param  {type} servers        description\n * @param  {type} options        description\n * @param  {type} coldBrewConfig description\n * @return {type}                description\n */\nfunction coldBrewRTC(servers, options, coldBrewConfig, dataChannelConfig) {\n  if (coldBrewConfig && coldBrewConfig.production) {\n    return new RTCPeerConnection(servers, options);\n  }\n\n  // setup config for RTCPeerConnection\n  coldBrewConfig = coldBrewConfig || {};\n\n  const listeners = coldBrewConfig.listeners || RTC_PEER_CONNECTION_EVENTS;\n  const label = coldBrewConfig.label || null;\n  validateListeners(listeners);\n\n  // setup config for dataChannelConfig\n  dataChannelConfig = dataChannelConfig || {};\n\n  const dataListeners = dataChannelConfig.listeners || RTC_DATA_CHANNEL_EVENTS;\n  validateDataListeners(dataListeners);\n\n  // Create peer connection\n  const peerConnection = new RTCPeerConnection(servers, options);\n  addEventLogListeners(peerConnection, listeners, label);\n  addDataListenersOnChannelCreation(peerConnection, dataListeners);\n  addDataListenersOnDataChannelEvent(peerConnection, dataListeners);\n\n  return peerConnection;\n\n\n  function validateListeners(listeners) {\n    const valid = listeners.every(listener =>\n      RTC_PEER_CONNECTION_EVENTS.includes(listener));\n\n    if (!valid) {\n      throw new ColdBrewError(\n        'Invalid event names passed in to coldBrewRTC');\n    }\n  }\n\n  function validateDataListeners(dataListeners) {\n    const valid = dataListeners.every(listener =>\n      RTC_DATA_CHANNEL_EVENTS.includes(listener));\n\n    if (!valid) {\n      throw new ColdBrewError(\n        'Invalid data channel event names passed in to coldBrewRTC');\n    }\n  }\n\n  function addEventLogListeners(peerConnection, listeners, label = null) {\n    if (label) {\n      window.coldBrewData.peerConnections[label] = [];\n    }\n\n    listeners.forEach((listener) => {\n      peerConnection.addEventListener(listener, (event) => {\n        window.coldBrewData.RTCEvents.push(event);\n        if (label) {\n          window.coldBrewData.peerConnections[label].push(event);\n        }\n      });\n    });\n  }\n\n  function addDataListenersOnChannelCreation(peerConnection, dataListeners) {\n    const createDataChannel = peerConnection.createDataChannel.bind(peerConnection);\n\n    peerConnection.createDataChannel = function (...args) {\n      const newDataChannel = createDataChannel(...args);\n      dataListeners.forEach((listener) => {\n        newDataChannel.addEventListener(listener, (event) => {\n          window.coldBrewData.RTCDataChannelEvents.push(event)\n        });\n      });\n\n      return newDataChannel;\n    }\n  }\n\n  function addDataListenersOnDataChannelEvent(peerConnection, dataListeners) {\n    Object.defineProperty(peerConnection, 'ondatachannel', {\n      set(func) {\n        peerConnection.addEventListener('datachannel', function (e) {\n          const datachannel = e.channel;\n          dataListeners.forEach((listener) => {\n            datachannel.addEventListener(listener, (event) => {\n              window.coldBrewData.RTCDataChannelEvents.push(event);\n            });\n          });\n\n          func(e);\n        });\n      },\n    });\n  }\n}\n\n\nfunction observeSignaling(socket, options = {}) {\n  if (options.production === true) return socket;\n\n  return new Proxy(socket, {\n    get(target, key, receiver) {\n      switch (key) {\n      case 'emit':\n        return emitAndLog(target);\n\n      case 'on':\n        return logOnReceipt(target);\n\n      default:\n        return target[key];\n      }\n    },\n  });\n\n  function emitAndLog(target) {\n    return function (...args) {\n      // emit can be called with 1 to 3 arguments:\n      // type\n      // type, data\n      // type, callback\n      // type, data, callback\n      // Therefore, we need to parse the arguments\n      const type = args[0];\n\n      let data;\n      let callback;\n\n      if (args[1]) {\n        if (typeof args[1] === 'function') callback = args[1];\n        else data = args[1];\n      }\n\n      if (args[2]) {\n        if (typeof args[2] === 'function') callback = args[2];\n      }\n\n      window.coldBrewData.socketEvents.outgoing.push({\n        type,\n        data,\n        callback,\n      });\n\n      return target.emit(...args);\n    }\n  }\n\n  function logOnReceipt(target) {\n    return function (type, callback) {\n      target.on(type, (...data) => {\n        window.coldBrewData.socketEvents.incoming.push({\n          type,\n          data,\n          callback,\n        });\n\n        callback(...data);\n      });\n    }\n  }\n}\n\n\nclass ColdBrewError extends Error {}\n\nif (typeof module !== 'undefined') {\n  module.exports = {\n    coldBrewRTC,\n    observeSignaling,\n    RTC_PEER_CONNECTION_EVENTS,\n    RTC_DATA_CHANNEL_EVENTS\n  };\n}\n\n"}